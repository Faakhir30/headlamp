name: Publish Plugin Container

on:
  push:
    tags:
    - 'v*'
  workflow_dispatch:
    inputs:
      buildTag:
        description: 'Plugin container tag (with the "v" prefix)'
        required: true
        type: string
      containerTags:
        description: 'Container tags (separated by a comma)'
        type: string

permissions:
  contents: read
  security-events: write # required for uploading security scan results

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: headlamp-k8s/headlamp-plugin

jobs:
  push_to_registry:
    name: Push plugin container image
    runs-on: ubuntu-latest
    permissions:
      packages: write # needed for publishing container images
    steps:
    - name: Check out the repo
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

    - name: Set up QEMU
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

    - name: Figure out the tag based on event trigger
      env:
        TRIGGER: ${{ github.event_name }}
      run: |
        CONTAINER_TAGS=${{ github.event.inputs.containerTags }}
        if [ "$TRIGGER" == "workflow_dispatch" ]; then
          echo "TRIGGERED_BY_WORKFLOW_DISPATCH with build tag ${{ github.event.inputs.buildTag }}"
          BUILD_TAG=${{ github.event.inputs.buildTag }}
          if [ -z $CONTAINER_TAGS ]; then
            CONTAINER_TAGS=$BUILD_TAG
          fi
        else
          # on push to a tag, use the latest tag starting with v and latest as the build tag
          BUILD_TAG="$(git tag --list --sort=version:refname 'v*' | tail -1)"
          if [ -z $CONTAINER_TAGS ]; then
            CONTAINER_TAGS="$BUILD_TAG,latest"
          fi
        fi
        # Join all tags with the image name
        TAGS=""
        for TAG in $(echo $CONTAINER_TAGS|tr ',' ' ') ; do \
          TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG},${TAGS}
        done
        # Remove trailing comma
        TAGS=$(echo $TAGS | sed s/,$//g)
        echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
        echo "CONTAINER_TAGS=$TAGS" >> $GITHUB_ENV
    - name: Print finalised tags
      run: |
        echo "BUILD_TAG=${{ env.BUILD_TAG }}"
        echo "CONTAINER_TAGS=${{ env.CONTAINER_TAGS }}"
    - name: Log in to the Container registry
      uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Build and push Docker image
      uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
      with:
        context: plugins/headlamp-plugin
        file: plugins/headlamp-plugin/Dockerfile
        push: false  # Don't push until we scan
        platforms: linux/amd64,linux/arm64
        tags: ${{ env.CONTAINER_TAGS }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/headlamp-plugin.tar

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        input: /tmp/headlamp-plugin.tar
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
        ignore-unfixed: true

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Push image if scan passes
      if: success()
      uses: docker/build-push-action@0a97817b6ade9f46837855d676c4cca3a2471fc9 # v4.2.1
      with:
        context: plugins/headlamp-plugin
        file: plugins/headlamp-plugin/Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: ${{ env.CONTAINER_TAGS }}
        cache-from: type=gha 